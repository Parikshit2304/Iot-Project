<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Filament Dryer Monitor</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <link rel="stylesheet" href="/css/dashboard.css">
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <i class="fas fa-cube"></i>
                <h1>Filament Dryer Monitor</h1>
            </div>
            <div class="nav">
                <a href="/" class="dashboard-btn pulse">Home</a>
                <div class="current-time" id="current-time"></div>
            </div>
            
        </header>
        
        <div class="connection-status">
            <div class="status-indicator connected" id="connection-indicator"></div>
            <div class="status-text" id="connection-text">Connected to ESP32</div>
        </div>
        
        <div class="dashboard">
            <div class="card">
                <div class="card-header">
                    <div class="card-title">CURRENT TEMPERATURE</div>
                    <div class="card-icon temp-icon">
                        <i class="fas fa-temperature-high"></i>
                    </div>
                </div>
                <div class="card-value" id="current-temp">-- °C</div>
                <div class="card-label">Last updated: <span id="temp-updated">--</span></div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <div class="card-title">CURRENT HUMIDITY</div>
                    <div class="card-icon humidity-icon">
                        <i class="fas fa-tint"></i>
                    </div>
                </div>
                <div class="card-value" id="current-humidity">-- %</div>
                <div class="card-label">Last updated: <span id="humidity-updated">--</span></div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <div class="card-title">AVG. TEMPERATURE (24H)</div>
                    <div class="card-icon temp-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                </div>
                <div class="card-value" id="avg-temp">-- °C</div>
                <div class="card-label">Min: <span id="min-temp">--</span> | Max: <span id="max-temp">--</span></div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <div class="card-title">AVG. HUMIDITY (24H)</div>
                    <div class="card-icon humidity-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                </div>
                <div class="card-value" id="avg-humidity">-- %</div>
                <div class="card-label">Min: <span id="min-humidity">--</span> | Max: <span id="max-humidity">--</span></div>
            </div>
        </div>
        
        <div class="charts-container">
            <div class="chart-card">
                <h3>Temperature Trend (Last 24 Hours)</h3>
                <canvas id="temperatureChart"></canvas>
            </div>
            
            <div class="chart-card">
                <h3>Humidity Trend (Last 24 Hours)</h3>
                <canvas id="humidityChart"></canvas>
            </div>
            
            <div class="chart-card big-chart">
                <h3>Combined Trends</h3>
                <canvas id="combinedChart"></canvas>
            </div>
        </div>
        
        <div class="table-container">
            <div class="table-header">
                <h2>Historical Data</h2>
                <div class="search-container">
                    <i class="fas fa-search"></i>
                    <input type="text" id="timestamp-search" placeholder="Search by timestamp...">
                </div>
            </div>
            
            <table>
                <thead>
                    <tr>
                        <th>Timestamp</th>
                        <th>Temperature (°C)</th>
                        <th>Humidity (%)</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody id="data-table-body">
                    <!-- Table rows will be populated by JavaScript -->
                </tbody>
            </table>
            
            <div class="pagination" id="pagination">
                <!-- Pagination will be populated by JavaScript -->
            </div>
        </div>
    </div>
    
    <script>
        // Current time display
        function updateCurrentTime() {
            const now = new Date();
            document.getElementById('current-time').textContent = now.toLocaleString();
        }
        
        // Update time every second
        setInterval(updateCurrentTime, 1000);
        updateCurrentTime();
        
        // // Sample data (this would normally come from the ESP32)
        // let sensorData = [];
        
        // // Generate sample historical data for the last 24 hours
        // function generateSampleData() {
        //     const data = [];
        //     const now = new Date();
            
        //     for (let i = 0; i < 288; i++) { // 24 hours with 5-minute intervals
        //         const timestamp = new Date(now.getTime() - (288 - i) * 5 * 60 * 1000); // 5 minutes ago each step
                
        //         // Generate random temperature between 45-60°C with some fluctuation
        //         const baseTemp = 50 + Math.sin(i / 24) * 5;
        //         const temp = (baseTemp + (Math.random() * 3 - 1.5)).toFixed(1);
                
        //         // Generate random humidity between 10-30% with some fluctuation
        //         const baseHumidity = 20 + Math.cos(i / 36) * 8;
        //         const humidity = (baseHumidity + (Math.random() * 4 - 2)).toFixed(1);
                
        //         data.push({
        //             timestamp: timestamp,
        //             temperature: parseFloat(temp),
        //             humidity: parseFloat(humidity)
        //         });
        //     }
            
        //     return data;
        // }
        
        // Initialize data
        sensorData = generateSampleData();
        
        // Calculate statistics
        function calculateStats(data) {
            if (data.length === 0) return { avg: 0, min: 0, max: 0 };
            
            const sum = data.reduce((acc, val) => acc + val, 0);
            const avg = sum / data.length;
            const min = Math.min(...data);
            const max = Math.max(...data);
            
            return { avg, min, max };
        }
        
        // Update dashboard statistics
        function updateStats() {
            const latestData = sensorData[sensorData.length - 1];
            
            // Current values
            document.getElementById('current-temp').textContent = `${latestData.temperature.toFixed(1)} °C`;
            document.getElementById('current-humidity').textContent = `${latestData.humidity.toFixed(1)} %`;
            
            const lastUpdate = latestData.timestamp.toLocaleTimeString();
            document.getElementById('temp-updated').textContent = lastUpdate;
            document.getElementById('humidity-updated').textContent = lastUpdate;
            
            // 24-hour statistics
            const temperatures = sensorData.map(d => d.temperature);
            const humidities = sensorData.map(d => d.humidity);
            
            const tempStats = calculateStats(temperatures);
            const humidityStats = calculateStats(humidities);
            
            document.getElementById('avg-temp').textContent = `${tempStats.avg.toFixed(1)} °C`;
            document.getElementById('min-temp').textContent = `${tempStats.min.toFixed(1)} °C`;
            document.getElementById('max-temp').textContent = `${tempStats.max.toFixed(1)} °C`;
            
            document.getElementById('avg-humidity').textContent = `${humidityStats.avg.toFixed(1)} %`;
            document.getElementById('min-humidity').textContent = `${humidityStats.min.toFixed(1)} %`;
            document.getElementById('max-humidity').textContent = `${humidityStats.max.toFixed(1)} %`;
        }
        
        // Initialize charts
        function initCharts() {
            const timeLabels = sensorData.map(d => d.timestamp.toLocaleTimeString());
            const temperatures = sensorData.map(d => d.temperature);
            const humidities = sensorData.map(d => d.humidity);
            
            // Temperature chart
            const tempCtx = document.getElementById('temperatureChart').getContext('2d');
            const tempChart = new Chart(tempCtx, {
                type: 'line',
                data: {
                    labels: timeLabels,
                    datasets: [{
                        label: 'Temperature (°C)',
                        data: temperatures,
                        borderColor: '#f72585',
                        backgroundColor: 'rgba(247, 37, 133, 0.1)',
                        tension: 0.4,
                        fill: true,
                        pointRadius: 0,
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                maxTicksLimit: 6,
                                maxRotation: 0
                            },
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            beginAtZero: false,
                            suggestedMin: Math.min(...temperatures) - 5,
                            suggestedMax: Math.max(...temperatures) + 5
                        }
                    }
                }
            });
            
            // Humidity chart
            const humidityCtx = document.getElementById('humidityChart').getContext('2d');
            const humidityChart = new Chart(humidityCtx, {
                type: 'line',
                data: {
                    labels: timeLabels,
                    datasets: [{
                        label: 'Humidity (%)',
                        data: humidities,
                        borderColor: '#4cc9f0',
                        backgroundColor: 'rgba(76, 201, 240, 0.1)',
                        tension: 0.4,
                        fill: true,
                        pointRadius: 0,
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                maxTicksLimit: 6,
                                maxRotation: 0
                            },
                            grid: {
                                display: false
                            }
                        },
                        y: {
                            beginAtZero: false,
                            suggestedMin: Math.min(...humidities) - 5,
                            suggestedMax: Math.max(...humidities) + 5
                        }
                    }
                }
            });
            
            // Combined chart
            const combinedCtx = document.getElementById('combinedChart').getContext('2d');
            const combinedChart = new Chart(combinedCtx, {
                type: 'line',
                data: {
                    labels: timeLabels,
                    datasets: [
                        {
                            label: 'Temperature (°C)',
                            data: temperatures,
                            borderColor: '#f72585',
                            backgroundColor: 'transparent',
                            tension: 0.4,
                            pointRadius: 0,
                            borderWidth: 2,
                            yAxisID: 'y'
                        },
                        {
                            label: 'Humidity (%)',
                            data: humidities,
                            borderColor: '#4cc9f0',
                            backgroundColor: 'transparent',
                            tension: 0.4,
                            pointRadius: 0,
                            borderWidth: 2,
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    plugins: {
                        legend: {
                            position: 'top'
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                maxTicksLimit: 12,
                                maxRotation: 0
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Temperature (°C)'
                            },
                            suggestedMin: Math.min(...temperatures) - 5,
                            suggestedMax: Math.max(...temperatures) + 5
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Humidity (%)'
                            },
                            suggestedMin: Math.min(...humidities) - 5,
                            suggestedMax: Math.max(...humidities) + 5,
                            grid: {
                                drawOnChartArea: false
                            }
                        }
                    }
                }
            });
            
            // Return charts for updating
            return { tempChart, humidityChart, combinedChart };
        }
        
        // Data table management
        const recordsPerPage = 10;
        let currentPage = 1;
        let filteredData = [...sensorData];
        
        function updateTable() {
            const tableBody = document.getElementById('data-table-body');
            tableBody.innerHTML = ''; // Clear existing rows
            
            const startIndex = (currentPage - 1) * recordsPerPage;
            const endIndex = Math.min(startIndex + recordsPerPage, filteredData.length);
            
            // Show relevant page of data
            for (let i = startIndex; i < endIndex; i++) {
                const data = filteredData[i];
                
                // Determine status based on values
                let statusClass = 'status-normal';
                let statusText = 'Normal';
                
                if (data.temperature > 55 || data.humidity > 25) {
                    statusClass = 'status-warning';
                    statusText = 'Warning';
                }
                
                if (data.temperature > 65 || data.humidity > 30) {
                    statusClass = 'status-alert';
                    statusText = 'Alert';
                }
                
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${data.timestamp.toLocaleString()}</td>
                    <td>${data.temperature.toFixed(1)} °C</td>
                    <td>${data.humidity.toFixed(1)} %</td>
                    <td><span class="status ${statusClass}">${statusText}</span></td>
                `;
                
                tableBody.appendChild(row);
            }
            
            updatePagination();
        }
        
        function updatePagination() {
            const paginationElement = document.getElementById('pagination');
            paginationElement.innerHTML = '';
            
            const totalPages = Math.ceil(filteredData.length / recordsPerPage);
            
            // Previous button
            const prevButton = document.createElement('button');
            prevButton.innerHTML = '&laquo;';
            prevButton.disabled = currentPage === 1;
            prevButton.addEventListener('click', () => {
                if (currentPage > 1) {
                    currentPage--;
                    updateTable();
                }
            });
            paginationElement.appendChild(prevButton);
            
            // Page buttons
            for (let i = 1; i <= totalPages; i++) {
                if (
                    i === 1 || 
                    i === totalPages || 
                    (i >= currentPage - 1 && i <= currentPage + 1)
                ) {
                    const pageButton = document.createElement('button');
                    pageButton.textContent = i;
                    pageButton.classList.toggle('active', i === currentPage);
                    pageButton.addEventListener('click', () => {
                        currentPage = i;
                        updateTable();
                    });
                    paginationElement.appendChild(pageButton);
                } else if (
                    i === currentPage - 2 || 
                    i === currentPage + 2
                ) {
                    const ellipsis = document.createElement('button');
                    ellipsis.textContent = '...';
                    ellipsis.disabled = true;
                    paginationElement.appendChild(ellipsis);
                }
            }
            
            // Next button
            const nextButton = document.createElement('button');
            nextButton.innerHTML = '&raquo;';
            nextButton.disabled = currentPage === totalPages;
            nextButton.addEventListener('click', () => {
                if (currentPage < totalPages) {
                    currentPage++;
                    updateTable();
                }
            });
            paginationElement.appendChild(nextButton);
        }
        
        // Search functionality
        document.getElementById('timestamp-search').addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            
            if (searchTerm.trim() === '') {
                filteredData = [...sensorData];
            } else {
                filteredData = sensorData.filter(data => 
                    data.timestamp.toLocaleString().toLowerCase().includes(searchTerm)
                );
            }
            
            currentPage = 1; // Reset to first page
            updateTable();
        });
        
        // WebSocket connection to ESP32 (simulated here)
        function setupWebSocket() {
            // In a real implementation, you would connect to your ESP32
            // const socket = new WebSocket('ws://your-esp32-ip-address/ws');
            
            // For demo purposes, we'll simulate incoming data
            const simulateData = () => {
                // Generate new data point
                const now = new Date();
                const baseTemp = 50 + Math.sin(now.getMinutes() / 10) * 5;
                const temp = (baseTemp + (Math.random() * 3 - 1.5)).toFixed(1);
                
                const baseHumidity = 20 + Math.cos(now.getMinutes() / 15) * 8;
                const humidity = (baseHumidity + (Math.random() * 4 - 2)).toFixed(1);
                
                const newData = {
                    timestamp: now,
                    temperature: parseFloat(temp),
                    humidity: parseFloat(humidity)
                };
                
                // Add new data point and remove oldest if over 288 points (24 hours at 5-min intervals)
                sensorData.push(newData);
                if (sensorData.length > 288) {
                    sensorData.shift();
                }
                
                // Update dashboard
                updateStats();
                updateCharts();
                
                // Update table if showing all data
                if (document.getElementById('timestamp-search').value.trim() === '') {
                    filteredData = [...sensorData];
                    updateTable();
                }
            };
            
            // Simulate new data every 5 seconds
            setInterval(simulateData, 5000);
            
            // Simulate connection status changes
            setInterval(() => {
                const indicator = document.getElementById('connection-indicator');
                const text = document.getElementById('connection-text');
                
                if (Math.random() > 0.95) { // 5% chance of disconnection
                    indicator.classList.remove('connected');
                    indicator.classList.add('disconnected');
                    text.textContent = 'Disconnected from ESP32';
                } else {
                    indicator.classList.remove('disconnected');
                    indicator.classList.add('connected');
                    text.textContent = 'Connected to ESP32';
                }
            }, 10000);
        }
        
        // Initialize charts
        const charts = initCharts();
        
        // Update charts with new data
        function updateCharts() {
            const timeLabels = sensorData.map(d => d.timestamp.toLocaleTimeString());
            const temperatures = sensorData.map(d => d.temperature);
            const humidities = sensorData.map(d => d.humidity);
            
            charts.tempChart.data.labels = timeLabels;
            charts.tempChart.data.datasets[0].data = temperatures;
            charts.tempChart.update();
            
            charts.humidityChart.data.labels = timeLabels;
            charts.humidityChart.data.datasets[0].data = humidities;
            charts.humidityChart.update();
            
            charts.combinedChart.data.labels = timeLabels;
            charts.combinedChart.data.datasets[0].data = temperatures;
            charts.combinedChart.data.datasets[1].data = humidities;
            charts.combinedChart.update();
        }
        
        // Initialize everything
        updateStats();
        updateTable();
        setupWebSocket();
    </script>
</body>
</html>
